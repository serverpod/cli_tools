/// This file is auto-generated.
library;

import 'package:cli_tools/better_command_runner.dart' show CompletionTarget;

const String _completionScript = r'''
# example completion                                       -*- shell-script -*-

# This bash completions script was generated by
# completely (https://github.com/bashly-framework/completely)
# Modifying it manually is not recommended

_example_completions_filter() {
  local words="$1"
  local cur=${COMP_WORDS[COMP_CWORD]}
  local result=()

  # words the user already typed (excluding the command itself)
  local used=()
  if ((COMP_CWORD > 1)); then
    used=("${COMP_WORDS[@]:1:$((COMP_CWORD - 1))}")
  fi

  if [[ "${cur:0:1}" == "-" ]]; then
    # Completing an option: offer everything (including options)
    echo "$words"

  else
    # Completing a non-option: offer only non-options,
    # and don't re-offer ones already used earlier in the line.
    for word in $words; do
      [[ "${word:0:1}" == "-" ]] && continue

      local seen=0
      for u in "${used[@]}"; do
        if [[ "$u" == "$word" ]]; then
          seen=1
          break
        fi
      done
      ((!seen)) && result+=("$word")
    done

    echo "${result[*]}"
  fi
}

_example_completions() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  local compwords=()
  if ((COMP_CWORD > 0)); then
    compwords=("${COMP_WORDS[@]:1:$((COMP_CWORD - 1))}")
  fi
  local compline="${compwords[*]}"

  COMPREPLY=()

  case "$compline" in
    'completion install'*'--write-dir')
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -A directory -- "$cur")
      ;;

    'completion embed'*'--output-dir')
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -A directory -- "$cur")
      ;;

    'completion generate'*'--target')
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_example_completions_filter "completely carapace")" -- "$cur")
      ;;

    'completion install'*'--target')
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_example_completions_filter "completely carapace")" -- "$cur")
      ;;

    'completion generate'*'--file')
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -A file -- "$cur")
      ;;

    'completion embed'*'--target')
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_example_completions_filter "completely carapace")" -- "$cur")
      ;;

    'completion generate'*'-t')
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_example_completions_filter "completely carapace")" -- "$cur")
      ;;

    'completion generate'*'-f')
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -A file -- "$cur")
      ;;

    'completion install'*'-d')
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -A directory -- "$cur")
      ;;

    'completion install'*'-t')
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_example_completions_filter "completely carapace")" -- "$cur")
      ;;

    'completion embed'*'-t')
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_example_completions_filter "completely carapace")" -- "$cur")
      ;;

    'completion embed'*'-d')
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -A directory -- "$cur")
      ;;

    'completion generate'*)
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_example_completions_filter "--quiet -q --verbose -v --target -t --exec-name -e --file -f")" -- "$cur")
      ;;

    'completion install'*)
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_example_completions_filter "--quiet -q --verbose -v --target -t --exec-name -e --write-dir -d")" -- "$cur")
      ;;

    'completion embed'*)
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_example_completions_filter "--quiet -q --verbose -v --target -t --script-file -f --output-file -o --output-dir -d")" -- "$cur")
      ;;

    'completion'*)
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_example_completions_filter "generate embed install --quiet -q --verbose -v")" -- "$cur")
      ;;

    *)
      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_example_completions_filter "completion --quiet -q --verbose -v")" -- "$cur")
      ;;

  esac
} &&
  complete -F _example_completions example

# ex: filetype=sh

''';

/// Embedded script for command line completion for `completely`.
const completionScriptCompletely = (
  target: CompletionTarget.completely,
  script: _completionScript,
);
